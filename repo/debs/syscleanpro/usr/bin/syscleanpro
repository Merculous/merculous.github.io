#!/bin/bash
#syscleanpro ~brc0703 <brc0703@yahoo.com>

##### root test #####
# won't go any farther unless you're uid=0
[ `id -u` != 0 ] && exec echo "Sorry you need to be root to run this tool"
echo -e "\nsyscleanpro v3.1 ~brc0703\n"
sleep 3
echo -e "updating database before we begin\n"
updatedb
echo "starting storage size"
DFSTART=`df -h | grep -v devfs`
echo -e "$DFSTART\n"
sleep 2
echo -e "Let's Clean Up Some System Space..\n"
sleep 2

# clean up voice files
PVFW=/System/Library/PrivateFrameworks
SW=/SportsWorkout.framework/voices
VST=/VoiceServices.framework/TTSResources
if [ -e $PVFW$VST/cs-CZ ]; then
	read -p "Remove Foreign Voice Files? y/n: " choice
		if [ "$choice" = "y" ]; then
			cd $PVFW$SW/female
			rm -rf DEDE ESES FRFR ITIT JAJP ZHCN
			cd $PVFW$SW/male
			rm -rf DEDE ESES FRFR ITIT JAJP ZHCN
			cd $PVFW$VST
			rm -rf cs-CZ da-DK de-DE el-GR es-ES es-MX fi-FI fr-CA fr-FR hi-IN hu-HU id-ID it-IT ko-KR nl-BE nl-NL no-NO pl-PL pt-BR pt-PT ro-RO ru-RU sk-SK sv-SE th-TH tr-TR zh-CN zh-Hk zh-TW
		fi
			if [ "$choice" = "n" ]; then
				echo "Voice Files Not Removed"
			fi
	else
		echo "Voice Files Already Moved, Moving On.."
		echo
	sleep 2
fi

cd ~

# Move Fonts from system t0 private
SLF=/System/Library/Fonts
VF=/var/Fonts
FC=/Cache
if [ -d $SLF ] && [ ! -e $VF ]; then
	read -p "Move Fonts To Private Partition? y/n: " choice
		if [ "$choice" = "y" ]; then
			echo "Moving Fonts.."
			mkdir $VF
			mv -f $SLF$FC $VF
[[ -d $SLF$FC ]] && [[ -d $VF$FC ]] && rm -rf $SLF$FC
			ln -s $VF$FC $SLF$FC
			echo "Creating Link.."
		fi
	if [ "$choice" = "n" ]; then
		echo "Fonts Not Moved"
	fi
else
	echo -e "Fonts Already Moved, Moving On..\n"
	sleep 2
fi

DEVICE="$(sysctl hw.machine | awk '{ print $2 }')"
XRM=

if [ "$DEVICE" = "iPhone1,1" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ "$DEVICE" = "iPhone1,2" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ "$DEVICE" = "iPhone2,1" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ "$DEVICE" = "iPod1,1" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ "$DEVICE" = "iPod2,1" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ "$DEVICE" = "iPod3,1" ]; then
	echo "detected non retina $DEVICE"
	echo
	read -p "would you like to remove all retina images? y/n " XRM
	echo
fi

if [ -z "$XRM" ]; then
	echo -e "detected retina display $DEVICE\nskipping remove retina option"
else
	if [ "$XRM" = "y" ]; then
		echo -e "Searching file system for @2x images..\n"
		sleep 2
		locate @2x.png | grep -E @2x.png$ | grep -v -i -E '(en|English|ja)' > .deletelist_2xrm
			while read file
				do rm -rf "$file"
			done < .deletelist_2xrm
		num=$(cat .deletelist_2xrm | wc -l)
		rm -f .deletelist_2xrm
		echo -e "OK, $num retina files removed.\n"
		sleep 2
	fi
fi

tset -Q -i q

# clear out old temp files, if any, create new
rm -f .*_brc0703; touch {.alllist,.keyboardlist,.deletelist,.rmlist,.yeslist}_brc0703

locate /System/Library/TextInput/*.bundle | grep -E bundle$ | grep -v -i -E '(english|en|emoji|ja)' > .alllist_brc0703

# make sure alllist isn't empty, get basename of files, grep again just to be sure they're directories
# sort and get uniq names and now we have a list of all unique keyboard's on the phone.
[[ -s .alllist_brc0703 ]] && cat .alllist_brc0703 | xargs -n1 basename | grep -E bundle$ | sort | uniq > .keyboardlist_brc0703
##### end section #####

##### core function #####
# process keyboards, ask user to delete
keyboard () {

# $* is all arguments to the "keyboard" lines. If any of those appear in keyboardlist...
if echo $* | grep -q -i -f .keyboardlist_brc0703; then

# then start a loop to require yes or no
while [[ "$choice" != 'y' ]] && [[ "$choice" != 'n' ]]

# ask "delete the first argument, yes or no?"
do read -p "Delete: $(tput bold; tput setaf 3)${1%.*}$(tput sgr0) - y or n? " choice; done

# if yes
if [ $choice = "y" ]; then

# put that keyboard's formal name in yeslist
echo ${1%.*} >> .yeslist_brc0703

# put that keyboard's whole line in rmlist, replacing spaces with newlines
echo $* | tr ' ' '\n' >> .rmlist_brc0703

# confirm the choice
echo "${1%.*} will be deleted";

# if no, echo (that keyboard's formal name) will be kept
else echo "${1%.*} will be kept"; fi

# log the keyboard and choice
echo "known $1: $choice" >> sysclean.log

# clear the variable because I'm too lazy to use a new one
unset choice

# spacer
echo
fi
}

keyboard TextInput_.bundle
keyboard Arabic.bundle TextInput_ar.bundle
keyboard TextInput_bo.bundle
keyboard Catalan.bundle TextInput_ca.bundle
keyboard Cherokee.bundle TextInput_chr.bundle
keyboard Chinese.bundle TextInput_zh.bundle
keyboard Croatian.bundle TextInput_hr.bundle
keyboard Czech.bundle TextInput_cs.bundle
keyboard Danish.bundle TextInput_da.bundle
keyboard Dutch.bundle TextInput_nl.bundle
keyboard German.bundle TextInput_de.bundle
keyboard Greek.bundle TextInput_el.bundle
keyboard Spanish.bundle TextInput_es.bundle
keyboard Estonian.bundle TextInput_et.bundle
keyboard Finnish.bundle TextInput_fi.bundle
keyboard French.bundle TextInput_fr.bundle
keyboard Hebrew.bundle TextInput_he.bundle
keyboard Hungarian.bundle TextInput_hu.bundle
keyboard Indonesian.bundle TextInput_id.bundle
keyboard Icelandic.bundle TextInput_is.bundle
keyboard Italian.bundle TextInput_it.bundle
keyboard Korean.bundle TextInput_ko.bundle
keyboard lithuanian.bundle TextInput_lt.bundle
keyboard Latvian.bundle TextInput_lv.bundle
keyboard Malay.bundle TextInput_ms.bundle
keyboard Norwegien.bundle TextInput_nb.bundle
keyboard Polish.bundle TextInput_pl.bundle
keyboard Portuguese.bundle TextInput_pt.bundle
keyboard Romanian.bundle TextInput_ro.bundle
keyboard Russian.bundle TextInput_ru.bundle
keyboard Slovak.bundle TextInput_sk.bundle
keyboard Swedish.bundle TextInput_sv.bundle
keyboard Thai.bundle TextInput_th.bundle
keyboard Turkish.bundle TextInput_tr.bundle
keyboard Ukrainian.bundle TextInput_uk.bundle
keyboard Vietnamese.bundle TextInput_vi.bundle
##### end section #####


##### finalize, confirm or quit #####
# use rmlist to extract all directories to be deleted from alllist, put them in deletelist
grep -i -f .rmlist_brc0703 .alllist_brc0703 > .deletelist_brc0703
KBLIST=$(cat .deletelist_brc0703 | wc -l)
if [ "$KBLIST" -lt "1" ]; then
	rm -f .*_brc0703
	echo -e "No keyboards found to delete\n"
else
	echo -------------------------------------
	tput bold; tput setaf 3; tr '\n' ' ' < .yeslist_brc0703 
	echo; tput sgr0
	echo -------------------------------------
	while  [[ "$choice" != 'y' ]] && [[ "$choice" != 'n' ]]
		do echo "This is your last chance. Are you sure you want to delete the keyboard listed?"
		read -p "Type y or n: " choice; done
	if [ $choice = "y" ]; then
		echo -e "Please wait while I delete the chosen keyboard's..."
		while read file
		do rm -rf "$file"
		done < .deletelist_brc0703 
		rm -f .*_brc0703
	fi
fi
unset choice
echo "now searching for language packs"

# clear out old temp files, if any, create new
rm -f .*_fubaya; touch {.alllist,.langlist,.deletelist,.rmlist,.yeslist}_fubaya

# update database, search for lproj, grep directories, 
# filter out english, filter out strange "Scanner911" app languages, put rest in alllist
locate lproj | grep -E lproj$ | grep -v -i -E '(English|\/en|.en.l|blue.lproj|camo.lproj|classic.lproj|desert.lproj|modern.lproj)' > .alllist_fubaya

# make sure alllist isn't empty, get basename of files, grep again just to be sure they're directories
# sort and get uniq names and now we have a list of all unique languages on the phone.
[[ -s .alllist_fubaya ]] && cat .alllist_fubaya | xargs -n1 basename | grep -E lproj$ | sort | uniq > .langlist_fubaya
##### end section #####


##### core function #####
# process languages, ask user to delete
language ()
{
# $* is all arguments to the "language" lines. If any of those appear in langlist...
if echo $* | grep -q -i -f .langlist_fubaya
then

# then start a loop to require yes or no
while [[ "$choice" != 'y' ]] && [[ "$choice" != 'n' ]]	 

# ask "delete the first argument, yes or no?"
do read -p "Delete: $(tput bold; tput setaf 3)${1%.*}$(tput sgr0) - y or n? " choice; done

# if yes
if [ $choice = "y" ]
then
# put that language's formal name in yeslist
echo ${1%.*} >> .yeslist_fubaya

# put that language's whole line in rmlist, replacing spaces with newlines
echo $* | tr ' ' '\n' >> .rmlist_fubaya

# confirm the choice
echo "${1%.*} will be deleted";

# if no, echo (that language's formal name) will be kept
else echo "${1%.*} will be kept"; fi

# log the language and choice
echo "known $1: $choice" >> langpack.log

unset choice # clear the variable because I'm too lazy to use a new one
echo # spacer
fi
}

language Albanian.lproj alb.lproj sqi.lproj sq.lproj sq-sq.lproj sq_sq.lproj sq_al.lproj sq-al.lproj
language Amharic.lproj amh.lproj am.lproj am-am.lproj am_am.lproj
language Arabic.lproj ara.lproj ar.lproj ar-ar.lproj ar_ar.lproj ar_eg.lproj ar_sa.lproj
language Armenian.lproj arm.lproj hye.lproj hy.lproj hy_hy.lproj hy-hy.lproj
language Bulgarian.lproj bul.lproj bg.lproj bg_bg.lproj bg-bg.lproj
language Catalan.lproj ca.lproj cat.lproj ca_ca.lproj ca-ca.lproj ca_es.lproj
language Chinese.lproj chi.lproj zho.lproj zh.lproj zh-zh.lproj zh_zh.lproj zh-hans.lproj zh_hans.lproj zh-hant.lproj zh_hant.lproj zh_cn.lproj zh-cn.lproj zh-hk.lproj zh_hk.lproj zh-tw.lproj zh_tw.lproj
language Croatian.lproj hrv.lproj hr.lproj hr-hr.lproj hr_hr.lproj
language Czech.lproj cze.lproj ces.lproj cs.lproj cs-cs.lproj cs_cs.lproj cs-cz.lproj cs_cz.lproj cz.lproj cz_cz.lproj cz-cz.lproj
language Danish.lproj dan.lproj da.lproj da-da.lproj da_da.lproj da_dk.lproj da-dk.lproj
language Dutch.lproj dum.lproj dut.lproj nld.lproj nl.lproj nl-nl.lproj nl_nl.lproj
language Estonian.lproj est.lproj et.lproj et_ee.lproj et-ee.lproj
language Finnish.lproj fin.lproj fi.lproj fi-fi.lproj fi_fi.lproj
language French.lproj fra.lproj fre.lproj fr.lproj fr-fr.lproj fr_fr.lproj fr_ca.lproj fr-ca.lproj fr_fr.lproj fr-fr.lproj
language German.lproj deu.lproj ger.lproj de.lproj de-de.lproj de_de.lproj
language Greek.lproj gre.lproj ell.lproj el.lproj el-el.lproj el_el.lproj el_gr.lproj el-gr.lproj gr_el.lproj gr-el.lproj
language Gujarati.lproj guj.lproj gu.lproj gu_in.lproj
language Hebrew.lproj heb.lproj he.lproj he-he.lproj he_he.lproj he_il.lproj he-il.lproj hi_in.lproj hi-in.lproj
language Hindi.lproj hin.lproj hi.lproj hi_hi.lproj hi-hi.lproj
language Hungarian.lproj hun.lproj hu.lproj hu-hu.lproj hu_hu.lproj
language Icelandic.lproj ice.lproj isl.lproj is.lproj is_is.lproj is-is.lproj
language Indonesian.lproj ind.lproj id.lproj id-id.lproj id_id.lproj
language Iranian.lproj ira.lproj fa.lproj per.lproj fa_ir.lproj fa-ir.lproj fa-fa.lproj
language Italian.lproj ita.lproj it.lproj it-it.lproj it_it.lproj
language Japanese.lproj ja.lproj ja-ja.lproj ja_ja.lproj ja_jp.lproj ja-jp.lproj jp_jp.lproj jp-jp.lproj jpn.lproj
language Korean.lproj kor.lproj ko.lproj ko-ko.lproj ko_ko.lproj
language Latvian.lproj lav.lproj lv_lv.lproj
language Lithuanian.lproj lit.lproj lt.lproj lt-lt.lproj lt_lt.lproj
language Macedonian.lproj mk.lproj mac.lproj mk_mk.lproj mk-mk.lproj
language Malay.lproj may.lproj ms.lproj ms-ms.lproj ms_ms.lproj ms_my.lproj
language Norwegian.lproj nor.lproj nob.lproj nno.lproj nn_nn.lproj nn-nn.lproj no.lproj no-no.lproj no_no.lproj nb.lproj nb_nb.lproj nb-nb.lproj no_nb.lproj no-nb.lproj nb_no.lproj nb-no.lproj nn_no.lproj nn-no.lproj nn_nb.lproj nn-nb.lproj nb_nn.lproj nb-nn.lproj
language Panjabi.lproj pa.lproj pan.lproj pa_pa.lproj pa-pa.lproj pa_in.lproj pa-in.lproj
language Polish.lproj pol.lproj pl.lproj pl-pl.lproj pl_pl.lproj
language Portuguese.lproj por.lproj pt.lproj pt-pt.lproj pt_pt.lproj pt-br.lproj pt_br.lproj
language Romanian.lproj rup.lproj rum.lproj ron.lproj ro.lproj ro-ro.lproj ro_ro.lproj
language Russian.lproj rus.lproj ru.lproj ru-ru.lproj ru_ru.lproj
language Serbian.lproj sr.lproj sr-sr.lproj sr_sr.lproj sr_rs.lproj
language Slovak.lproj slk.lproj slo.lproj sk.lproj sk-sk.lproj sk_sk.lproj
language Slovenian.lproj slv.lproj sl.lproj sl-sl.lproj sl_sl.lproj sl_si.lproj sl-si.lproj
language Spanish.lproj spa.lproj sp.lproj sp-sp.lproj sp_sp.lproj es.lproj es_es.lproj es-es.lproj es_mx.lproj es_us.lproj es_419.lproj
language Swedish.lproj swe.lproj sv.lproj sv-sv.lproj sv_sv.lproj sv-se.lproj sv_se.lproj
language Thai.lproj tha.lproj th.lproj th-th.lproj th_th.lproj
language Turkish.lproj tur.lproj tr.lproj tr-tr.lproj tr_tr.lproj
language Ukrainian.lproj ukr.lproj uk.lproj uk_uk.lproj uk-uk.lproj uk_ua.lproj uk-ua.lproj
language Vietnamese.lproj vi.lproj vn.lproj vi-vi.lproj vi_vi.lproj vn-vn.lproj vn_vn.lproj vi_vn.lproj vi-vn.lproj vn-vi.lproj vn_vi.lproj
##### end section #####
unset choice

##### finalize, confirm or quit #####
# use rmlist to extract all directories to be deleted from alllist, put them in deletelist
grep -i -f .rmlist_fubaya .alllist_fubaya > .deletelist_fubaya

# if that failed, it's because there's nothing to delete. Dump out.
if [ "$?" -ne "0" ]; then
	tset -Q -i ^C
	rm -f .*_fubaya
	rm -f .*_brc0703
	echo -e "Didnt find any language packs.\nor you said no for them. peace out\n"
	exit
fi

# otherwise, display all languages that are going to be deleted
echo -------------------------------------
tput bold; tput setaf 3; tr '\n' ' ' < .yeslist_fubaya 
echo; tput sgr0
echo -------------------------------------

# start a loop to require yes or no, ask to final confirmation
while  [[ "$choice" != 'y' ]] && [[ "$choice" != 'n' ]]; do
echo "This is your last chance. Are you sure
you want to delete the languages listed?"
read -p "Type y or n: " choice; done
##### end section #####

##### delete, clean up, good-bye #####
# if yes
if [ $choice = "y" ]; then

# say "please wait" and loop through deletelist file, removing directories
	echo -e "Please wait while I delete the chosen language packs..."
	while read file
	do rm -rf "$file"
	done < .deletelist_fubaya 

# count how many directories were in deletelist
num=$(grep -c ^ .deletelist_fubaya)

# remove temp files
tset -Q -i ^C
rm -f .*_fubaya
rm -f .*_brc0703

# long goodbye
echo -e "$num language pack directories have been
deleted. The only other thing left is me"
read -p "your system is cleaned and theres no need to keep me around.. Do you want to go ahead uninstall me now? - y or n? " kill
[[ "$kill" = "y" ]] && echo "support insanelyi.com" && exec dpkg -r com.sull.syscleanpro
echo "Thank you, I'll be here if you need me."
##### end section #####

# if user said no to final confirmation, remove temp file and exit
else
	echo "support insanelyi at www.insanelyi.com"
fi

echo "do you remember what your"
echo "starting disk space was?"
sleep 3
echo -e "\n$DFSTART\n"
sleep 2
echo -e "updating database for an\naccurate before and after\ndisk space comaparison"
updatedb
df -h | grep -v devfs